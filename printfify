#!/usr/bin/env python3

# Copyright Â© 2017-2020 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import ast
import sys

escapes = {}
def _init_escapes():
    escapes[0x25] = '%%'
    for e in 'abfnrtv\\':
        c = ast.literal_eval('"\\{e}"'.format(e=e))
        escapes[ord(c)] = '\\' + e
_init_escapes()

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('path', metavar='FILE', nargs='?')
    options = ap.parse_args()
    if options.path is None:
        input = sys.stdin.buffer.read()
    else:
        with open(options.path, 'rb') as file:
            input = file.read()
    fmtstring = "'"
    args = []
    nspaces = 0
    nzeros = 0
    escape_zero = False
    def flush_spaces():
        nonlocal fmtstring, nspaces
        if nspaces < 4:
            fmtstring += nspaces * ' '
        else:
            fmtstring += '%{n}s'.format(n=nspaces)
        nspaces = 0
    def flush_zeros():
        nonlocal fmtstring, nzeros, escape_zero
        if nzeros > 0 and escape_zero:
            if nzeros < 4:
                fmtstring += '%d' + (nzeros - 1) * '0'
            else:
                fmtstring += '%0{n}d'.format(n=nzeros)
        else:
            if nzeros < 5:
                fmtstring += nzeros * '0'
            else:
                fmtstring += '%0{n}d'.format(n=nzeros)
        nzeros = 0
        escape_zero = False
    for i, c in enumerate(input):
        if c == 0x20:  # space
            flush_zeros()
            nspaces += 1
            continue
        elif c == 0x30:  # zero
            flush_spaces()
            nzeros += 1
            continue
        else:
            flush_spaces()
            flush_zeros()
        try:
            s = escapes[c]
        except KeyError:
            pass
        else:
            fmtstring += s
            continue
        if c < 0x20 or c >= 0x7F or c == 0x27:  # non-printable; apostrophe
            if c >= 0o100:
                ndigits = 3
            elif i + 1 < len(input) and 0x30 <= input[i + 1] <= 0x37:  # 0...7
                if c < 0o10 and input[i + 1] == 0x30:
                    ndigits = 1
                    escape_zero = True
                else:
                    ndigits = 3
            elif c >= 0o10:
                ndigits = 2
            else:
                ndigits = 1
            fmtstring += '\\{c:0{w}o}'.format(c=c, w=ndigits)
            continue
        if i == 0 and c == 0x2D:  # leading hyphen-minus
            fmtstring += '%s'
            args += ['-']
            continue
        fmtstring += chr(c)
    flush_spaces()
    flush_zeros()
    fmtstring += "'"
    print('printf', fmtstring, *args)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
